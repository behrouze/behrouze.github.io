{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/debugger-python-avec-pdb",
    "result": {"pageContext":{"id":"56e8599d-7f91-5ec6-a11b-74f154d6ef28","fileAbsolutePath":"/Users/behrouze/Sources/gatsby-blog/obsidian/Blog/debugger-python-avec-pdb.md","frontmatter":{"categories":["python"],"date":"2020-12-08","lastUpdate":null,"tags":["linux","productivite","python"],"title":"Débugger Python avec pdb"},"html":"<h2>Principe et outils</h2>\n<p>Pour debugger un script Python, il est possible d’utiliser plusieurs types de debugger (dont notre favoris VSCode avec l’<a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\">extension Python</a>), mais il existe également un outil de la librairie standard <code class=\"language-text\">pdb</code> qui permet de parcourir le code, arguments, variables etc en CLI (ce qui peut s’avérer utile pour débugger sur un serveur par ex).</p>\n<p>Pour l’utiliser il suffit d’<strong>importer la lib pdb</strong> puis d’utiliser la méthode statique <code class=\"language-text\">set_trace()</code> pour arrêter l’exécution du script à un endroit donné du code.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Python &lt; 3.7</span>\n<span class=\"token keyword\">import</span> pdb<span class=\"token punctuation\">;</span>\npdb<span class=\"token punctuation\">.</span>set_trace<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Python >= 3.7</span>\nbreakpoint</code></pre></div>\n<h2>Interagir avec pdb</h2>\n<p>une fois la ligne comportant <code class=\"language-text\">set_trace()</code> atteinte, une invite de commande nous redonne la main pour <a href=\"https://docs.python.org/3/library/pdb.html#debugger-commands\">interagir avec le code</a>.</p>\n<h3>Commandes de base</h3>\n<p><code class=\"language-text\">h</code> : help<br>\n<code class=\"language-text\">h X</code> : aide sur la commande X<br>\n<code class=\"language-text\">l</code> : (line) affichage des 11 lignes entourant la ligne actuelle<br>\n<code class=\"language-text\">w</code> : (where am I) nom de fichier, fonction, et ligne où est le curseur<br>\n<code class=\"language-text\">a</code> : (arguments) liste des arguments passés à la fonction courante<br>\n<code class=\"language-text\">p X</code> : (print) évalue la variable ou expression X<br>\n<code class=\"language-text\">dir(X)</code> : liste les propriétés et méthodes de l’objet X</p>\n<h3>Déplacement du curseur</h3>\n<p><code class=\"language-text\">n</code> : (next instruction) avance à l’instruction suivante<br>\n<code class=\"language-text\">s</code> : (step into) avance et descend dans l’instruction suivante<br>\n<code class=\"language-text\">r</code> : (return) continue l’exécution jusqu’au prochain return</p>\n<h3>Breakpoints ou points d’arrêts</h3>\n<p><code class=\"language-text\">b</code> : (breakpoints) liste les points d’arrêts<br>\n<code class=\"language-text\">b [([filename:]lineno | function) [, condition]]</code> : pour ajouter un breakpoint<br>\n<code class=\"language-text\">c</code> : (continue) poursuit l’exécution jusqu’au prochain breakpoint<br>\n<code class=\"language-text\">cl</code> : (clear) supprime tous les breakpoints<br>\n<code class=\"language-text\">enable/disable bpn</code> : active/désactive le breakpoint numéro bpn</p>\n<h2>Liens</h2>\n<p><a href=\"https://realpython.com/python-debugging-pdb/\">blog post complet</a></p>"}},
    "staticQueryHashes": ["1026020893","1333896537","28434099"]}