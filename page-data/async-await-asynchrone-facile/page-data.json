{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/async-await-asynchrone-facile",
    "result": {"pageContext":{"id":"d4df9869-509d-5ff7-9b9b-f78fc645230c","fileAbsolutePath":"/home/behrouze/Sources/gatsby-blog/obsidian/Blog/async-await-asynchrone-facile.md","frontmatter":{"categories":["dot-net"],"date":"2014-06-04","lastUpdate":null,"tags":["net-framework"],"title":"async await ou la programmation asynchrone facile"},"html":"<h2>Que sont les threads</h2>\n<p>Les ordinateurs personnels ne disposait pour la plupart (il n'y a encore pas si longtemps) qu'1 seul microprocesseur ou CPU. Pour multiplier le nombre de taches pouvant être traités virtuellement simultanément les systèmes d'exploitations on implémentés les Threads. Sans rentrer dans les détails, les threads permettent de switcher rapidement entre différentes taches pour augmenter la capacité de la machine à les traiter \"simultanément\" (en fait ce principe donne l'illusion qu'elles sont traités en parallèle).</p>\n<h2>Les limites coté serveur</h2>\n<p>Pour IIS le nombre de threads par processeur (nombre de requêtes ASP.Net pouvant être traité simultanément) est limité mais paramétrable. Il est défini à 25 threads (le maximum préconisé est de 100 threads par CPU). Article sur les <a href=\"http://msdn.microsoft.com/en-us/library/ee377050.aspx\" title=\"optimisations IIS et paramétrage de la limite du nombre de Threads\">optimisations IIS</a>.</p>\n<p>Il est important de comprendre que ce nombre est limité, ce qui à pour conséquence de limiter les performances de votre applications, surtout lorsque ces threads doivent \"attendre\" ce qui est souvent le case lors d'appel à des ressources extérieurs comme l'appel à des WebServices ou requêtes en base de données (temps de traitements, latences réseau etc.).</p>\n<h2>TPL - Task Parallel Library</h2>\n<p>Introduit dans le .Net Framework 4.0 la <a href=\"http://msdn.microsoft.com/fr-fr/library/dd460717%28v=vs.110%29.aspx\" title=\"TPL, Task Parallel Library, async, await\">Task Parallel Library</a> est une API qui permet de facilement paralléliser ou de traiter les requêtes en mode asynchrones (grâce à ces fameux threads).</p>\n<p>L'espace de nom dédié est : <a href=\"http://msdn.microsoft.com/fr-fr/library/system.threading.tasks%28v=vs.110%29.aspx\" title=\"Espace de nom dédié à la parallélisation et traitement asynchrone de taches\">System.Threading.Tasks</a> Définition du MSDN: L'espace de noms System.Threading.Tasks fournit des types qui simplifient le travail d'écriture de code simultané et asynchrone.</p>\n<p>La classe utilisée pour créer ces \"taches\" est: <a href=\"http://msdn.microsoft.com/en-us/library/system.threading.tasks.task%28v=vs.110%29.aspx\">System.Threading.Tasks.Task</a></p>\n<p>var iDThread = Thread.CurrentThread.ManagedThreadId; // indique l'ID du thread courant</p>"}},
    "staticQueryHashes": ["1026020893","28434099","3153813225"]}