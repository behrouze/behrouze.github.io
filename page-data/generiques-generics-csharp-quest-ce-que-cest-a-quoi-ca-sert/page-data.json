{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/generiques-generics-csharp-quest-ce-que-cest-a-quoi-ca-sert",
    "result": {"pageContext":{"id":"3541b58b-768c-59ca-9870-007e671fae2b","fileAbsolutePath":"/Users/behrouze/Sources/gatsby-blog/obsidian/Blog/generiques-generics-csharp-quest-ce-que-cest-a-quoi-ca-sert.md","frontmatter":{"categories":["dot-net"],"date":"2014-05-26","lastUpdate":null,"tags":["classe","tutoriel"],"title":"Génériques en C# (Generics) qu&#039;est ce que c&#039;est et à quoi ça sert ?"},"html":"<p><em>La définition vous semblera peut être un peu abstraite, mais la suite et les exemples vous permettront de mieux comprendre.</em></p>\n<p>Les génériques sont un concept en C# qui donne la possibilité au développeur:</p>\n<ol>\n<li>d'<strong>écrire</strong> <strong>ses propre  interfaces, classes, méthodes, événements et délégués génériques</strong>, en spécifiant un type en paramètre et d'obtenir malgré cela des objets fortement typés (<em>lire la suite pour comprendre</em>)</li>\n<li>d'<strong>utiliser</strong> tout un tas de classes et interfaces génériques <strong>déjà définis</strong> (et tellement utiles que nous ne pouvons pas nous en passer !) dans le <strong>.Net framework</strong> (pour être plus précis dans l'espace de nom <a href=\"http://msdn.microsoft.com/fr-fr/library/system.collections.generic.aspx\" title=\"classes et interfaces génériques disponibles dans le .Net Framework\">System.Collections.Generic</a>)</li>\n</ol>\n<p>La particularité d'un type générique est de <strong>prendre en paramètre un type</strong>, on utilise <strong>par convention <T></strong> (mais il est possible d'utiliser <X> ou autre). Cela  va permettre par exemple d'instancier un classe avec des types d'objets différents dans différentes situations.</p>\n<h2>Mais à quoi ça sert les génériques ?</h2>\n<p><em>Utilisons</em> par exemple d'un type générique extrêmement populaire, la classe <strong>List<T></strong> ou pour être plus précis <a href=\"http://msdn.microsoft.com/fr-fr/library/6sh2ey19.aspx\" title=\"classe générique permettant de créer une liste d&#x27;objets fortement typée\">System.Collections.Generic.List<T></a>. Sa définition est la suivante:</p>\n<blockquote>\n<p>Représente une liste fortement typée d'objets accessibles par index. Fournit des méthodes de recherche, de tri et de manipulation de listes.</p>\n</blockquote>\n<p>c'est donc une sorte de tableau qui pourra contenir des objets (le fameux <T>), le type d'objets que contiendra une liste en particulier sera déterminer lors de l'instanciation de la classe :</p>\n<p>var maListeInt = new List();</p>\n<p>var maListeVoitures = new List();</p>\n<p>dans cet exemple nous avons <strong>créé 2 instances</strong> de <strong>List<T></strong> <em>maListeInt</em> et <em>maListeVoitures.</em></p>\n<p><strong>maListeInt</strong> sera une liste <strong>contenant uniquement des int</strong>, alors que <em>maListeVoitures</em> sera une liste <strong>contenant uniquement des objets voitures</strong>. Il sera par exemple impossible d'ajouter des voitures dans <em>maListeInt (et inversement),</em> c'est pourquoi on dit qu'on a ici  des listes <strong>fortement typées</strong>.</p>\n<p>Nous avons donc pu <strong>ré-utiliser</strong> une même classe, la classe générique <em>System.Collections.Generic.List<T></em> (List<T>) pour créer des instances contenant (et permettant de manipuler) des objets de types différents (ici <em>int</em> et <em>voiture</em>).</p>\n<h2>Liens utiles:</h2>\n<p><a href=\"http://bdevuyst.developpez.com/tutoriels/dotnet/creer-ses-propres-classes-generiques/\" title=\"créer ses classe génériques\">article sur la création de classes génériques</a> - developpez.com</p>\n<p><a href=\"http://msdn.microsoft.com/fr-fr/library/512aeb7t.aspx\" title=\"génériques pas à pas\">les génériques</a> dans guide de programmation C# - MSDN</p>\n<p><a href=\"http://pluralsight.com/courses/csharp-generics\" title=\"Scott Allen nous propose un parcours de font en comble des Generics\">video</a> payante in english - Pluralsight</p>"}},
    "staticQueryHashes": ["1026020893","1333896537","28434099"]}