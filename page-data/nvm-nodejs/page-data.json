{"componentChunkName":"component---src-templates-wp-post-tsx","path":"/nvm-nodejs","result":{"pageContext":{"id":"02896fca-4844-5872-bb50-4a2354f1d4d6","fileAbsolutePath":"/home/behrouze/Sources/blog/obsidian/Blog/nvm-nodejs.md","frontmatter":{"categories":["devops"],"date":"2018-05-30","lastUpdate":"2022-01-31","tags":["devops","javascript","nodejs","nvm"],"title":"NVM Nodejs"},"html":"<p><code class=\"language-text\">nvm</code> (pour Node Version Manager) permet aux développeurs d'<strong>installer</strong> et d'<strong>utiliser</strong> <a href=\"https://github.com/nodejs/Release#release-schedule\">plusieurs versions</a> de Nodejs simultanément.\nCela permet par exemple d'utiliser 1 version de nodejs spécifique dans chaque projet, et cela peut être facilité via l'usage d'un fichier <code class=\"language-text\">.nvmrc</code> qui permet de spécifier (<a href=\"https://github.com/nvm-sh/nvm#nvmrc\">la version de nodejs souhaitée</a>) et l'appliquer avec la commande <code class=\"language-text\">nvm use</code>.</p>\nnvm a été conçu à l'origine pour tourner sur des OS Linux et OS X (et donc aussi <a href=\"/vscode-wsl\" title=\"WSL sous Windows\">WSL sous Windows</a>), mais il existe une version NVM Windows.\n<p><a href=\"https://github.com/creationix/nvm/blob/master/README.md#install-script\">Installation et mise à jour</a> par <strong>wget</strong>, et un <strong>prérequis</strong> à cette installation est d'avoir <code class=\"language-text\">git</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> -O- --no-check-certificate <span class=\"token function\">wget</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span></code></pre></div>\n<p>(<em>en cas d'erreur de certificats</em> utiliser l'argument <code class=\"language-text\">--no-check-certificate</code> de wget comme indiqué ci-dessus)</p>\n<h2>Usage de vmc</h2>\n<h3>Installation et choix d'une version</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">nvm <span class=\"token function\">install</span> <span class=\"token number\">17.4</span>.0           <span class=\"token comment\"># installe la version</span>\nnvm use                      <span class=\"token comment\"># utilise la version sépcifiée dans le fichier .nvmrc</span>\nnvm use <span class=\"token number\">17.4</span>                 <span class=\"token comment\"># utiliser la dernière version parmis les v17.4.x installées```</span>\n\nnvm use <span class=\"token function\">node</span>                 <span class=\"token comment\"># utiliser la dernière version installée de Node</span>\nnvm run <span class=\"token number\">10.3</span>.0 app.js        <span class=\"token comment\"># lance l'application app.js avec la version spécifiée</span>\nnvm <span class=\"token builtin class-name\">exec</span> <span class=\"token number\">10.3</span>.0 <span class=\"token function\">node</span> app.js  <span class=\"token comment\"># lance l'application app.js en définissant la version à utiliser dans le shell d'exécution</span></code></pre></div>\n<h3>Alias de versions</h3>\n<p>nvm permet d'aliaser les versions, c'est à dire créer une sorte de raccourci, et est surtout utilisé pour définir l'alias defaut qui est utilisé par défaut.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">nvm <span class=\"token builtin class-name\">alias</span> <span class=\"token comment\"># liste les alias de versions</span>\nnvm <span class=\"token builtin class-name\">alias</span> default <span class=\"token number\">8.11</span>.2 <span class=\"token comment\"># défini l'alias default sur la version spécifiée</span>\n\nnvm <span class=\"token builtin class-name\">alias</span> default <span class=\"token function\">node</span> <span class=\"token comment\"># défini l'alias default sur la dernière version dispo (LTS ou non)</span>\nnvm <span class=\"token builtin class-name\">alias</span> fav <span class=\"token number\">10.3</span>.0 <span class=\"token comment\"># cré ou redéfini un alias \"fav\" sur la version spécifiée</span>\n\nnvm use fav\nnvm <span class=\"token builtin class-name\">unalias</span> fav</code></pre></div>\n<h3>Lister les version de Nodejs</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">nvm <span class=\"token function\">ls</span>              <span class=\"token comment\"># liste les versions installées en local, les alias, celle par défaut etc</span>\nnvm current         <span class=\"token comment\"># indique la version courante</span>\n\nnvm <span class=\"token function\">which</span> current   <span class=\"token comment\"># indique le PATH de la version courante (ou de la version spécifiée)</span>\n\nnvm ls-remote       <span class=\"token comment\"># liste les versions disponibles</span>\nnvm ls-remote --lts<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> latest</code></pre></div>\n<h2>Remarques</h2>\n<h3>Installation globale de package npm</h3>\n<p>Lors d'une installation globale d'un package npm via <code class=\"language-text\">npm i -g</code> , les fichiers du package installé sont placés dans l'<strong>arborescence de la version actuellement sélectionnée</strong> <code class=\"language-text\">nvm current</code>.\nCes packages npm ne seront donc plus disponible si on switch de version avec un <code class=\"language-text\">nvm use</code>.</p>\n<p><em>Remarque</em> : depuis npm 5.3 et l'apparition de <code class=\"language-text\">npx</code>, il y a encore moins de raison d'installer un quelconque outil en global en dehors des outils comme <code class=\"language-text\">jest</code> ou <code class=\"language-text\">prettier</code> dans le cas de leurs utilisation avec VSCode par ex.</p>\n<h3>Astuce</h3>\n<p>Les <strong>binaires</strong> <strong>node</strong> et <strong>npm</strong> n'étant <strong>pas accessibles globalement</strong> (et c'est tout l’intérêt de <code class=\"language-text\">nvm</code>), il peut toutefois s'avérer utile (comme sur les serveur de recette/prod) d'avoir un accès systèm-wide à ces binaires.\nIl est alors possible de simplement <strong>créer des symlinks</strong> pour les rendre dispo dans le PATH (<a href=\"https://stackoverflow.com/questions/21215059/cant-use-nvm-from-root-or-sudo\">credit</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/versions/node/<span class=\"token variable\"><span class=\"token variable\">$(</span>nvm version<span class=\"token variable\">)</span></span>/bin/node\"</span> <span class=\"token string\">\"/usr/local/bin/node\"</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/versions/node/<span class=\"token variable\"><span class=\"token variable\">$(</span>nvm version<span class=\"token variable\">)</span></span>/bin/npm\"</span> <span class=\"token string\">\"/usr/local/bin/npm\"</span></code></pre></div>"}},"staticQueryHashes":["1026020893","2750442709","28434099"]}