{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/git-submodule-subtree",
    "result": {"pageContext":{"id":"31fbb4d7-03b3-50a7-a1d0-e5188f1415f9","fileAbsolutePath":"/home/behrouze/Sources/gatsby-blog/obsidian/Blog/git-submodule-subtree.md","frontmatter":{"categories":["devops"],"date":"2022-01-27","lastUpdate":"2022-02-28","tags":["linux","admin","repo","git","submodule","subtree"],"title":"Git subtree et submodule"},"html":"<p>Git poss√®de 2 notions qui permettent d'inclure un repo dans un repo üôÑ pour par exemple mutualiser des sources ou du contenu markdown :</p>\n<ul>\n<li><a href=\"https://www.atlassian.com/git/tutorials/git-submodule\">git submodule</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials/git-subtree\">git subtree</a></li>\n</ul>\n<h1>Diff√©rence entre subtree et submodule</h1>\n<p>TLDR : favoriser un subtree pour un workflow simplifi√©</p>\n<blockquote>\n<p>Git submodules are simply a reference to another repository at a particular snapshot in time.</p>\n</blockquote>\n<p>- <a href=\"https://www.atlassian.com/git/tutorials/git-submodule\">Atlassian</a></p>\n<blockquote>\n<p>Git subtree lets you nest one repository inside another as a sub-directory.</p>\n</blockquote>\n<p>- <a href=\"https://www.atlassian.com/git/tutorials/git-subtree\">Atlassian</a></p>\n<p>Donc les <strong>submodules</strong> permettent de r√©f√©rencer un repo dans un √©tat fix√© par un commit donn√© (important), alors que le subtree <strong>permet</strong> de se r√©f√©rer √† un repo ce qui simplifie le workflow si on souhaite juste consommer la derni√®re version de ce sous r√©po.</p>\n<h1>Workflow git subtree</h1>\n<h2>Ajouter le subtree</h2>\n<p>Se positionner √† l'int√©rieur du repo maitre puis ajouter le subtree avec un <code class=\"language-text\">git subtree add</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> subtree <span class=\"token function\">add</span> --prefix dossier-subtree git@github.com:behrouze/mon-super-repo-a-inclure.git master --squash</code></pre></div>\n<p>Cela va automatiquement cloner le repo souhait√© dans <em>dossier-subtree</em>.</p>\n<h2>Pull du subtree</h2>\n<p>il suffit de rejouer la commande d'ajout en remplacant le <code class=\"language-text\">git subtree add</code> par <code class=\"language-text\">git subtree pull</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> subtree pull --prefix dossier-subtree git@github.com:behrouze/mon-super-repo-a-inclure.git master --squash -m <span class=\"token string\">\"subtree update\"</span></code></pre></div>\n<h2>Push du subtree</h2>\n<p>Si on souhaite apporter des modification au subtree, il est plus simple d'effectuer ces modifs dans le r√©po <em>du subtree</em> lui meme ind√©pendament de cette arborescence, c'est √† dire, le cloner dans un dossier a part enti√®re et y effectuer les modifs.</p>\n<p>Si malgr√© tout on souhaite g√©rer les 2 r√©pos simultan√©ment, il est possible de push des modifications faites dans le subtree, pour cela utiliser <code class=\"language-text\">git subtree push</code> sans l'option <code class=\"language-text\">--prefix</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> subtree push --prefix dossier-subtree git@github.com:behrouze/mon-super-repo-a-inclure.git master</code></pre></div>\n<h1>Workflow git submodule</h1>\n<h2>Ajouter un submodule</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> submodule <span class=\"token function\">add</span> git@github.com:behrouze/mon-projet-de-sous-module.git</code></pre></div>\n<h2>Clone d'un projet contenant un sous-module</h2>\n<p>Pour travailler avec les submodules, il faut cloner le r√©po parent avec l'option <code class=\"language-text\">--recurse-submodules</code>, dans l'exemple suivant</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> clone --recurse-submodules git@github.com:behrouze/projet.git</code></pre></div>\n<p>Si on oublie l'option <code class=\"language-text\">--recurse-submodules</code> lors du <code class=\"language-text\">git clone</code> il est toujours possible de rattraper le coup avec :</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> dossier-du-sous-module\n<span class=\"token function\">git</span> submodule init\n<span class=\"token function\">git</span> submodule update</code></pre></div>\n<h2>Pull du submodule</h2>\n<p>Le concepte a retenir, c'est que lorsqu'on initialise un submodule, on cr√©e une sorte de pointeur vers un commit donn√© du submodule. Cela veut dire qu'un simple git pull ne mettra pas a jour le submodule ü•∫</p>\n<p>Si le repo du sous-module a √©t√© mis a jour et les commit push√©s, il faut alors mettre √† jour le submodule dans le projet qui l'embarque, et alors utiliser <code class=\"language-text\">git submodule update</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> submodule update --remote\n<span class=\"token function\">git</span> commit -am <span class=\"token string\">\"mise a jour du submodule\"</span>\n<span class=\"token function\">git</span> push</code></pre></div>"}},
    "staticQueryHashes": ["1026020893","28434099","3153813225"]}