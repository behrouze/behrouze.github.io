{"componentChunkName":"component---src-templates-wp-post-tsx","path":"/react-hooks","result":{"pageContext":{"id":"bf950b74-7e3d-519d-8b28-8915a9e84436","fileAbsolutePath":"/Users/behrouze/Sources/gatsby-blog/obsidian/Blog/react-hooks.md","frontmatter":{"categories":["programmation"],"date":"2020-11-10","lastUpdate":"2022-01-25","tags":["javascript","react","hooks"],"title":"React hooks"},"html":"<blockquote>\n<p>A hook is a function provided by React that let’s you hook into react features from your function components\nDan Abramov (React Conf 2018)</p>\n</blockquote>\n<p>Les <a href=\"https://www.youtube.com/watch?v=dpw9EHDh2bM\">Hooks ont été introduits en 2018</a> pour :</p>\n<ul>\n<li>alléger la syntaxe pour créer des composants, ce sont désormais de simple <code class=\"language-text\">fonctions</code></li>\n<li>éviter les lourdeurs liées au fonctionnement des classes avec leurs <a href=\"https://fr.reactjs.org/docs/react-component.html#the-component-lifecycle\">lifecycle methods</a></li>\n<li>mieux rassembler la logique du code au sein d’un même composant (éclaté dans les différents lifecyle methods des classes)</li>\n<li>permettre de créer un moyen de partager du code devant gérer un état local avec les <code class=\"language-text\">custom hooks</code></li>\n</ul>\n<h1>UseState</h1>\n<p><code class=\"language-text\">UseState</code> est l’un des 1er hooks introduit dans <a href=\"https://youtu.be/V-QO-KO90iQ?t=588\">React v16.8</a>.<br>\nIl permet de disposer d’un state au sein d’un function component, là où une classe était nécessaire avec toute la plomberie qui allait avec (déclarer un objet state initial, appeler super( ) dans le constructeur, binding du this pour les méthodes etc.).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">blah</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>couleur<span class=\"token punctuation\">,</span> setCouleur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gris\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>couleur<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>UseEffect</h1>\n<h2>Utilité</h2>\n<p><code class=\"language-text\">UseEffect</code>(est un hook permettant de dire à React ce que ce composant doit faire après son rendu initial.</p>\n<p>Il compense les lifecyle methodes <code class=\"language-text\">componentDidMount</code>( ), <code class=\"language-text\">componentWillUnmount</code>( ) et <code class=\"language-text\">componentDidUpdate</code>( ) qui permettent de gérer des side effect (requête ajax, logging, modif du DOM, gestion d’event listeners etc.).</p>\n<p><code class=\"language-text\">UseEffect</code> est <strong>placé à l’intérieur du composant</strong> de façon à avoir accès aux <strong>states</strong> et <strong>props</strong> (scope de la fonction, closures).</p>\n<h2>Usage</h2>\n<p><code class=\"language-text\">UseEffect</code> est exécuté par défaut après chaque mount (et donc aussi après chaque re-render &#x3C;=> unmount puis mount).</p>\n<p>On peut utiliser <code class=\"language-text\">UseEffect</code> plusieurs fois dans un même composant pour la séparer des responsabilités (<a href=\"https://blog.behrouze.com/principes-solid-programmation-orientee-objet/#Single_Responsibility_Principle\">SRP</a>) et contrôler leurs exécutions vis à vis des states dont dépendent chaque UseEffect.</p>\n<h2>Re-rendu</h2>\n<p>Pour éviter l’exécution systématique du side effect, il faut passer un 2ème argument optionnel, qui est un tableau de dépendances avec les states dont dépends l’éxécution de la fonction.<br>\nPour un <em>re-rendu unique indépendant d’un state</em>, il suffit de passer un tableau vide.</p>\n<h2>Nettoyage à l’unmount</h2>\n<p>Lorsqu’un composant est démonté, il peut être utile d’avoir une phase de <strong>nettoyage</strong> équivalente au componentWillUnmount( ), nous permettant par ex de supprimer les enventListeners pour éviter les fuites mémoires, il est possible de <strong>retourner une fonction au sein de l’effet</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">blah</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>couleur<span class=\"token punctuation\">,</span> setCouleur<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gris\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">La nouvelle tendance est </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>couleur<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>couleur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>UseContext</h1>\n<p>React dispose d’un hook dédié à la consommation du context permettant de partager de la data dans une arborescence complète.</p>\n<h1>Global</h1>\n<p>Les hooks doivent être utilisés tout <a href=\"https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\">en haut de la fonction</a> et pas dans un bloc if, for ou autre.</p>"}},"staticQueryHashes":["1026020893","2750442709","28434099"]}