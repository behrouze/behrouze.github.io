{"componentChunkName":"component---src-templates-wp-post-tsx","path":"/acces-aux-donnees","result":{"pageContext":{"id":"7666379a-ccdb-5816-9c51-8118726a4a95","fileAbsolutePath":"/Users/behrouze/Sources/gatsby-blog/obsidian/Blog/acces-aux-donnees.md","frontmatter":{"categories":["programmation"],"date":"2012-02-17","lastUpdate":null,"tags":["dotnet","ide","base-de-donnees","database","debutant","microsoft","programmation","tutoriel","visual-studio"],"title":"accès et présentation des données en ASP.Net"},"html":"<p>[caption id=\"attachment_161\" align=\"alignnone\" width=\"852\" caption=\"data source controls et data bound controls\"]<img src=\"images/7_64-2012.03.01-17.35.57.png\" alt=\"interaction entre data source controls et data bound controls\" title=\"schéma simplifié de l&#x27;interaction entre data source controls et data bound controls\">[/caption]</p>\n<p>Dans Visual Studio 2010 il existe des contrôles ASP.Net qui permettent d'interagir avec des données indépendamment du type de la source de donnée (SQL Server, MySQL, fichier XML, Access, etc). Ils sont répartis en 2 familles, les <strong>data source controls</strong> et les <strong>data-bound controls</strong>:</p>\n<ul>\n<li><strong>data source controls</strong>, cette catégorie regroupe les contrôles permettant de faire le <strong>lien</strong> entre <em>la source de donnée</em> et le <em>data-bound control</em> (ci-dessous). C'est lui qui accède directement à la base de donnée (ou fichier) et à qui il faut donc fournir les informations de connection (dans ses propriétés). Dans Visual Studio 2010 vous trouverez les data source controls suivants (avec les sources de données auquels ils permettent d'accéder):</li>\n</ul>\n<ol>\n<li>AccessDataSource: base <strong>MS Access</strong> en lecture seule</li>\n<li>ObjectDataSource: couche d'abstraction, permettant de donner une \"<strong>vue objet</strong>\" aux données</li>\n<li>SqlDataSource: n'importe quelle base de données accessible via <strong>ODBC ou OLE DB</strong></li>\n<li>LinqDataSource: équivalent à l'<strong>ADO.NET Entity Framework</strong></li>\n<li>EntityDataSource</li>\n<li>XmlDataSource: fichier <strong>XML</strong></li>\n</ol>\n<ul>\n<li><strong>data-bound controls</strong>, cette catégorie regroupe les contrôles permettant de <em>générer</em> et <em>présenter les données</em> à l'utilisateur, c'est en quelque sorte <strong>l'IHM</strong>. Chaque data bound control présente des <strong>caractéristiques propres</strong>, ce qui va vous permettre de déterminer le plus adéquat en fonction de la situation. Voici les data bound controls dont vous disposez dans Visual Studio 2010:</li>\n</ul>\n<ol>\n<li>GridView</li>\n<li>DataList</li>\n<li>Repeater</li>\n<li>ListView (combinaison des 3 précédents)</li>\n<li>DetailsView</li>\n<li>FormView</li>\n<li>DataPager (a utiliser avec une ListView)</li>\n</ol>\n<p>Et nous avons en bonus 2 composants présents dans la section Data de notre cher Visual Studio, mais dont le role diffère des précités <strong>data source controls</strong> et <strong>data-bound controls</strong>:</p>\n<ol>\n<li>QueryExtender: permet de filtrer les données et interragit avec les LinqDataSource et EntityDataSource</li>\n<li>Chart: composant permettant de générer des graphiques</li>\n</ol>"}},"staticQueryHashes":["1026020893","2750442709","28434099"]}