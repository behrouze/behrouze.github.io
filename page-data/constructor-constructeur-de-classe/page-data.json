{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/constructor-constructeur-de-classe",
    "result": {"pageContext":{"id":"ead650eb-5274-53cd-95a3-060920e5944b","fileAbsolutePath":"/home/behrouze/Sources/gatsby-blog/obsidian/Blog/constructor-constructeur-de-classe.md","frontmatter":{"categories":["dot-net","programmation-oriente-objet"],"date":"2012-02-15","lastUpdate":null,"tags":["c-sharp","classe","csharp","objet","tutoriel"],"title":"Constructeur et Destructeur de classe, utilité et fonctionnement"},"html":"<h2>Constructeur</h2>\n<p>Un <strong>constructeur</strong> est <strong>une méthode de classe</strong> (un peu particulière) qui est <strong>appelée automatiquement</strong> lorsqu'on instancie une classe ex: var monInstance = <strong>new</strong> <em>maClasse</em> <strong>( )</strong>;</p>\n<p>Le constructeur joue plusieurs <em>rôles</em> :</p>\n<ul>\n<li>il permet d'<strong>initialiser les champs et propriétés</strong> d'un objet</li>\n<li>il permet d'<strong>exécuter des instructions d'initialisation de l'objet</strong> (vérifications et validations de données à affecter par ex, tracing etc.)</li>\n</ul>\n<p>Les constructeurs ont les caractéristiques suivantes:</p>\n<ol>\n<li>ils <strong>ne retournent aucune valeur</strong> (ni void, ni int, ni quoique ce soit)</li>\n<li>ont le <strong>même nom que la classe</strong> dans laquelle il est définie</li>\n<li>il est <strong>possible de déclarer plusieurs constructeurs</strong> au sein d'une même classe (surcharge de méthode), chacun comportant alors des paramètres différents (en type et/ou en nombre)</li>\n<li>il existe un <strong>constructeur <strong>sans paramètre</strong> par défaut</strong> pour toute classe, il existe sans qu'on ait à le déclarer. Cependant, si nous déclarons explicitement des constructeurs dans notre classe, le constructeur par défaut (sans paramètres) <strong>disparaît</strong> (il ne sera donc plus possible d'instancier <em>maclasse()</em> )et il faudra alors le redéfinir si nous en avons besoin.</li>\n</ol>\n<p>Pour finir, les constructeurs étant des membres de classe (ce sont des méthodes), nous pouvons leur appliquer <a href=\"http://www.brooz.fr/2012/02/14/encapsulation-et-portee-les-modificateurs-dacces-en-c/\" title=\"encapsulation et portée, les modificateurs d’accès en C#\">les modificateurs de portées: public, private, protected or internal</a>.</p>\n<h2>Destructeur</h2>\n<p>C# permet également de déclarer un (et un seul) <strong>destructeur</strong> pour une classe donnée, auquel il sera fait appel pour exécuter une série d'instructions <strong>avant</strong> <strong>libération de la mémoire</strong> (occupé par l'objet) par le  <strong>garbage collector</strong>.</p>\n<p><em>Le destructeur a les caractéristiques suivants:</em></p>\n<ol>\n<li>il est <strong>impossible d'invoquer manuellement un destructeur</strong> (pour relâcher la mémoire explicitement, il faut implémenter la méthode <strong>Dispose()</strong> de l'interface <a href=\"http://msdn.microsoft.com/fr-fr/library/system.idisposable.aspx\" title=\"interface IDisposable\">IDisposable</a>)</li>\n<li>ne prends <strong>aucun paramètre</strong></li>\n<li>ne retourne <strong>aucune</strong> <strong>valeur</strong></li>\n<li>n'accepte pas les <strong>modificateurs de portées</strong></li>\n<li>ne peut pas être hérité ou surchargée (il est possible de définir 1 et 1 seul destructeur par classe, même dans des classes dérivées)</li>\n</ol>\n<p><em>Déclaration d'un destructeur:</em></p>\n<p>MaClasse {</p>\n<p>~MaClasse () {</p>\n<p><em>expressions exécutées <strong>automatiquement</strong> lors du passage du garbage collector</em> ;</p>\n<p>}</p>\n<p>}</p>\n<h2>Constructeur static</h2>\n<p>Le constructeur de classe Static est un constructeur particulier sans paramètre et qui a la particularité d'être exécuté 1 seule fois, avant tout autre constructeur, et avant l'appel à des méthodes ou champs statiques. MaClasse {</p>\n<p>static MaClasse () {</p>\n<p><em>expressions et initialisations exécutées <strong>automatiquement avant tout autre initialisation ou invocation d'autre constructeurs</strong></em></p>\n<p>}</p>\n<p>}</p>"}},
    "staticQueryHashes": ["1026020893","1333896537","28434099"]}