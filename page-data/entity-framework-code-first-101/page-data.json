{"componentChunkName":"component---src-templates-wp-post-tsx","path":"/entity-framework-code-first-101","result":{"pageContext":{"id":"bedc6eb7-bd80-53f8-b641-382f00be25f2","fileAbsolutePath":"/home/behrouze/Sources/blog/obsidian/Blog/entity-framework-code-first-101.md","frontmatter":{"categories":["programmation"],"date":"2016-05-22","lastUpdate":null,"tags":["dotnet","fullstack","tutoriel"],"title":"Entity Framework Code First 101"},"html":"<h2>Les briques de base</h2>\n<p>Voici les étapes pour gérer une base de donnée avec <strong>Entity Framework</strong> en mode <strong>Code First</strong> avec la possibilité d'effectuer des <a href=\"https://docs.microsoft.com/fr-fr/ef/ef6/modeling/code-first/migrations/\">migrations</a> de Bases de Données simplement en modifiant du code C#.</p>\n<h3>Package NuGet</h3>\n<p>Les classes d'<strong>EntityFramework</strong> se trouvent dans le package NuGet du même nom, et elles sont dans les namespaces <strong>System.Data.Entity.*</strong> et <strong>System.ComponentModel.DataAnnotations.Schema</strong></p>\n<h3>La base de données</h3>\n<p>La base de données est <strong>représentée</strong> par une dérivée de la classe DbContext, il faudra donc dériver de cette classe pour créer notre propre base de données.</p>\n<ul>\n<li>créer une <strong>classe</strong> <em>MonDBContext</em> héritant de <strong>DbContext</strong> (dans System.Data.Entity)</li>\n<li>appeler la <strong>base classe</strong> de <em>MonDBContext</em> avec en <strong>paramètre</strong>, le nom de la <strong><a href=\"https://docs.microsoft.com/fr-fr/ef/ef6/fundamentals/configuring/connection-strings\">chaine de connexion</a></strong></li>\n<li>créer des propriétés <strong>DbSet<T></strong> qui représentent les <strong>tables</strong> de notre BDD</li>\n<li>créer les <strong>classes du domaine</strong> (domain classes) <strong>ou entités</strong> qui vont contenir la <strong>structure des tables</strong> (types des colonnes des tables) et qui sont simplement des <strong>classes POCO C#</strong></li>\n</ul>\n<h3>Initializer</h3>\n<p>EF nous met à disposition <strong>4 stratégies d'initialisation</strong> qui vont déterminer le comportement du code vis à vis du SGBD:</p>\n<ul>\n<li><strong>CreateDatabaseIfNotExists</strong> : va créer une nouvelle BDD uniquement s'il n'y en a pas déja une portant le même nom</li>\n<li><strong>DropCreateDatabaseIfModelChanges</strong> : va déruire la BDD existante et en recréer une si nos Entités ont été modifiées</li>\n<li><strong>DropCreateDatabaseAlways</strong> : détruit et recrée systématiquement la BDD</li>\n<li><strong>MigrateDatabaseToLatestVersion</strong> : va migrer automatiquement la BDD pour qu'elle correspondre au code</li>\n<li><em>MonPropreDBInitializer</em>  : dérivé de l'un des 4 types ci-dessus, il permet de populer la base avec des données initiales</li>\n</ul>\n<p>nous devront en choisir une et la passer en paramètre à <strong>Database.SetInitializer</strong>.</p>\n<h3>Données de départ</h3>\n<p>Nous aurons souvent besoin de données une fois la base créée, que ce soit pour le début de vie de l'application, ou pour les tests. Cela se fait dans notre propre Initializer (le 5ème type précédemment cité), hérité de d'une des 4 classes ci-dessus.</p>\n<p>Il faut effectuer une surcharge de la méthode <strong>Seed</strong> héritée, terminer la méthode <strong>Seed</strong> par un base.Seed(context); (<a href=\"http://www.entityframeworktutorial.net/code-first/seed-database-in-code-first.aspx\">bien expliqué ici</a>).</p>\n<h3>Exemple</h3>\n<p>Voilà à quoi devrait ressembler notre Context Entity Framework :</p>\n<p>public class MonDBContext: DbContext\n{\npublic MonDBContext() : base(\"nomDeMaChaineDeConnexion\")\n{<br>\n// Pour désactiver l'initialisation: Database.SetInitializer<MonDBContext>(null);\nDatabase.SetInitializer<MonDBContext>(new CreateDatabaseIfNotExists<MonDBContext>());\n}</p>\n<p>public DbSet&#x3C;Entité1> Table1 { get; set; }\npublic DbSet&#x3C;Entité2> Table2 { get; set; }</p>\n<p>protected override void OnModelCreating(DbModelBuilder modelBuilder)\n{\nbase.OnModelCreating(modelBuilder);\n}\n}</p>\n<h2>Migrations</h2>\n<p>Une des fonctionnalités phare d'EF est la possibilité d'effectuer les <strong>migrations</strong> de <strong>structure</strong> de la base de données et/ou des <strong>données</strong>, avec du code uniquement (ie sans SQL). Cela est extrêmement utile en phase de conception notamment. Nous avons a disposition <strong>2 modes</strong> de migrations: mode <a href=\"https://docs.microsoft.com/fr-fr/ef/ef6/modeling/code-first/migrations/automatic\"><strong>auto</strong></a> et mode <strong>manuel</strong> (code-based), mais dans les 2 cas, un dossier Migrations avec une classe Configuration.cs va être créé, ainsi qu'une table <strong>__MigrationsHistory</strong> dans la base de donnée, qui va permettre (en historisant les migrations), la synchronisation entre le code C# et la structure de la BDD.</p>\n<h3>Migration Auto</h3>\n<p>Pour rendre son projet migrable il faut exécuter la commande suivante dans la <strong>console Package Manager</strong> de Visual Studio (<em>menu View => Other Windows</em>) en faisant attention  de <strong>bien sélectionner le projet contenant EF</strong> dans la liste déroulante \"<em>Default Project</em>\": Enable-Migrations -EnableAutomaticMigrations (exécuter get-help Enable-Migrations -full  pour obtenir <strong>l'aide complète</strong> sur cette commande).</p>\n<p>Cela va créer automatiquement un <strong>dossier ~\\Migrations</strong> dans votre projet avec un <strong>fichier Configuration</strong> contenant une <strong>classe Configuration</strong> : DbMigrationsConfiguration<MonDbContext>  . Nous pouvons justement \"configurer\" la migration grâce au constructeur de cette classe (voir ci-dessous) :</p>\n<p>internal sealed class Configuration : DbMigrationsConfiguration<MonDbContext>\n{\npublic Configuration()\n{\nAutomaticMigrationsEnabled = true;\nAutomaticMigrationDataLossAllowed = false;\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">protected override void Seed(MonDbContext context)\n{\n    SeedUsersRoles(context);\n}</code></pre></div>\n<p>...\n}</p>\n<p>Dernier point, il est conseillé (surtout si vous avez déjà des données en base) d'utiliser l'initializer <strong>MigrateDatabaseToLatestVersion</strong> pour effectuer des migrations auto.</p>\n<h3>Migration Manuelle</h3>\n<p>Comme pour la migration Auto il faut effectuer un Enable-Migrations (sans l'option EnableAutomaticMigrations) pour préparer votre projet et votre BDD aux migrations, mais en mode manuel, il va falloir spécifier chaque étapes de migration (après avoir modifié vos Entités ou domain classes ) en exécutant (toujours dans la <em>Console Package Manager</em>) la commande :</p>\n<ol>\n<li>Add-Migration nomDeMaMigration  ce qui va générer un fichier timestampé dans le dossier Migrations et que vous pourrez modifier pour gérer par exemple les migrations ou modifications de données (get-help Add-Migration -Detailed  pour obtenir l'aide)</li>\n<li>Update-Database –verbose  qui va exécuter les migrations ajoutés et pas encore exécutés (pour l'aide get-help Update-Database -Detailed)</li>\n</ol>\n<h4>Retour arrière</h4>\n<p>Avec les migrations manuelles il est possible d'effectuer des rollbacks pour revenir en arrière (sous réserve de ne pas avoir détruit vos données), il suffit d'exécuter</p>\n<p>update-database -TargetMigration:nomDunDeMesMigrationsPrecedente</p>\n<h2>Erreurs</h2>\n<p>Si vous démarrez non pas d'une feuille vierge mais avec une <a href=\"https://docs.microsoft.com/fr-fr/ef/ef6/modeling/code-first/migrations/existing-database#step-3-add-an-initial-migration\">BDD existante</a>, <strong>le 1re Add-Migration</strong> doit comporter le paramètre <strong>IgnoreChanges</strong>: Add-Migration InitialCreate -IgnoreChanges suivi d'un normal Update-Database</p>\n<p>Bien faire attention :</p>\n<ol>\n<li>d'exécuter ses commandes dans la Package Manager Console et pas une des autres consoles</li>\n<li>de bien sélectionner le projet contenant notre code EF (1ère erreur de la screenshot)</li>\n<li>tenter de relancer un Enable-Migrations sur un projet déjà activé ne sert à rien (2ème erreur de la screenshot)</li>\n</ol>\n<p><img src=\"2019-01-12-21_40_27-ARCOTEC-Microsoft-Visual-Studio-Administrator.png\" alt=\"EF Migration Errors\"></p>\n<h2>Liens</h2>\n<p>Tutos MSDN: <a href=\"http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application\">EF- &#x26; MVC5</a></p>\n<p><a href=\"http://www.entityframeworktutorial.net/code-first/database-initialization-strategy-in-code-first.aspx\">Stratégies d'initialisation</a></p>"}},"staticQueryHashes":["1026020893","28434099","3153813225"]}