{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/resolution-de-chemin-physique-virtuel-en-asp-net",
    "result": {"pageContext":{"id":"f45bd7be-27b0-59cf-9832-40aa3ed6a50d","fileAbsolutePath":"/home/behrouze/Sources/gatsby-blog/obsidian/Blog/resolution-de-chemin-physique-virtuel-en-asp-net.md","frontmatter":{"categories":["dot-net"],"date":"2013-08-28","lastUpdate":null,"tags":["net","asp-net-mvc","c-sharp","debutant","tutoriel"],"title":"Résolution de chemin Physique &amp; Virtuel en ASP.NET"},"html":"<p>Nos applications web une fois déployés ne sont généralement pas installées sur le serveur web dans la même arborescence que sur notre poste de travail et cela peut causer des problèmes d'accès à des fichiers. Nous sommes donc souvent confronté, au besoin de <em>récupérer</em> un <strong>chemin Physique</strong> depuis un <strong>chemin Virtuel</strong> pour y effectuer des manipulations sur le <strong>système de fichier</strong> (tests d’existence, créations, suppressions de répertoires ou de fichiers).</p>\n<p>exemples:</p>\n<ul>\n<li>chemin physique: <strong>D:WebsitesMonSite</strong>Contentpage</li>\n<li>chemin virtuel: **~/**Content/page</li>\n</ul>\n<p>En ASP.Net une méthode retrouve un chemin physique à partir d'un chemin virtuel, la méthode statique de la <strong>classe Server</strong> MapPath() (qui porte bien son nom !):</p>\n<p>string MonCheminPhysique = HttpContext.Current.Server.MapPath(\"~/Content/index.css\");</p>\n<p>nous pouvons également exploiter la méthode équivalente de la <strong>classe Request</strong>:</p>\n<p>string MonCheminPhysique = HttpContext.Current.Request.MapPath(\"~/Content/index.css\");</p>\n<p>Voici 2 articles intéressants:</p>\n<ul>\n<li><a href=\"http://www.west-wind.com/weblog/posts/2009/Dec/21/Making-Sense-of-ASPNET-Paths\" title=\"article en anglais\">blog de Rick Strahl</a></li>\n<li><a href=\"http://www.dotnetperls.com/mappath\">dotnetperls</a></li>\n</ul>"}},
    "staticQueryHashes": ["1026020893","28434099","3153813225"]}