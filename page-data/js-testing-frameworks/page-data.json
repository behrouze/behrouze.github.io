{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/js-testing-frameworks",
    "result": {"pageContext":{"id":"c7085dcc-6271-5a53-b1d4-0ab0a899a6d7","fileAbsolutePath":"/Users/behrouze/Sources/gatsby-blog/obsidian/Blog/js-testing-frameworks.md","frontmatter":{"categories":["javascript"],"date":"2018-10-10","lastUpdate":null,"tags":["tdd","testing","tu"],"title":"JS Testing Frameworks"},"html":"<p>Voici un recueil d'infos à propos des Frameworks de test ainsi que des assertion libraires populaire en 2018</p>\n<h2>Jest</h2>\n<p>Zero configuration testing platform. A l'origine, basé sur <strong>Jasmine</strong> (jusqu'à la v15, today v23)</p>\n<h3>Strengths of Jest</h3>\n<ol>\n<li>The biggest advantage of using Jest is that it <strong>works out of the box</strong> with minimal setup or configuration. Much of this is because it comes with an assertion library and mocking support. It's built into the popular create-react-app</li>\n<li>Jest also supports <strong><a href=\"https://facebook.github.io/jest/docs/snapshot-testing.html#content\">snapshot testing</a></strong>, which can be really handy for preventing accidental UI regressions. Snapshots render a UI component, take a screenshot of it, and compare the component to a reference image stored with the test: expect(component).toMatchSnapshot();</li>\n<li>Jest runs your tests concurrently in <strong>parallel</strong> (asynchronous testing), providing a smoother, faster test run</li>\n<li>running on <a href=\"https://nodejs.org/\">Node.js</a> and in the browser</li>\n<li><a href=\"https://jestjs.io/docs/en/configuration#options\">configuration</a> can <a href=\"https://jestjs.io/docs/en/configuration\">be defined in</a> the <strong>package.json</strong> file of your project, or through a <strong>jest.config.js</strong> file or through the <strong>--config &#x3C;path/to/js|json></strong></li>\n<li>universal testing platform, with the ability to adapt to <a href=\"https://jestjs.io/docs/en/testing-frameworks\">any JavaScript library or framework</a></li>\n</ol>\n<h3>Weaknesses of Jest</h3>\n<p>Jest’s biggest weaknesses stem from being newer and less widely used among JavaScript developers.</p>\n<h2>Mocha</h2>\n<p>Mocha provides developers with a base test framework, allowing you to have options as to which assertion, mocking, and spy libraries you want to use.</p>\n<h3>Strengths of Mocha</h3>\n<ol>\n<li>Mocha’s greatest strength is its flexibility, one of <strong>the most flexible JavaScript testing libraries</strong> available. If having complete control of your testing framework is something you want, Mocha is by far the most configurable and best choice.</li>\n<li>It doesn’t come with an assertion library or mocking framework. <a href=\"http://stackoverflow.com/questions/10472152/standalone-assertion-libraries\">This SO post</a> discusses some of the popular JavaScript assertion libraries. One popular choice is to use Chai for test assertions and <a href=\"http://sinonjs.org/\">Sinon</a> for mocking.</li>\n<li>Community due to it's lifetime.</li>\n</ol>\n<h3>Weaknesses of Mocha</h3>\n<p>Mocha’s main weakness is that it requires more configuration.</p>\n<h2>Assertion Libraries</h2>\n<p><a href=\"http://www.chaijs.com/\">Chai</a> is one of the most popular open-source assertion libraries used with Mocha. Chai is a BDD/TDD assertion library for <a href=\"http://nodejs.org/\">node</a> and the browserwith an abundance of plugins and extensions.</p>\n<p><a href=\"http://sinonjs.org/\">Sinon</a> is a popular mocking and spy library. With robust documentation on fakes, stubs, spies, and mocks, Sinon is easy to pick up and integrate with Mocha.</p>\n<p><a href=\"http://airbnb.io/enzyme/\">Enzyme</a> was developed by Airbnb for testing React components’ outputs. Enzyme <a href=\"https://reactjs.org/docs/shallow-renderer.html\">shallow renders</a> your components so that you ensure that your component is being passed the correct props and behaviors. Enzyme can be used in addition to any testing framework. Enzyme is easy to configure and has additional libraries for integration with popular libraries (like <code class=\"language-text\">jest-enzyme</code> and <code class=\"language-text\">chai-enzyme</code>).With Enzyme we can create a mock DOM to test whether components are rendered correctly, and whether they behave correctly when acted upon.Enzyme’s mock rendering can either be done through shallow rendering or full DOM rendering. Enzyme v3 support React 16; Enzyme is <a href=\"https://github.com/airbnb/enzyme#running-enzyme-tests\">unopinionated</a> regarding which test runner or assertion library you use, and should be compatible with all major test runners and assertion libraries out there.</p>\n<h2>Integration test</h2>\n<p><a href=\"http://www.nightmarejs.org\">Nightmare</a> for integration testing</p>\n<p><a href=\"https://www.puzzle.ch/de/blog/articles/2018/02/12/phantomjs-is-dead-long-live-headless-browsers\">Headless</a> alternatives à PhantomJs qui est ☠️</p>\n<p><a href=\"https://github.com/GoogleChrome/puppeteer/blob/master/README.md\">Puppeteer</a> is a Node.js library, developed by Google. It provides a convenient Node.js API to control <a href=\"https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md\">Headless Chrome</a> that is just a regular Chrome v59+ that is launched with the --headless flag that exposes an API to control it</p>\n<p><a href=\"https://browsersync.io/\">BrowserSync</a> affiche en parallèle le résultat de nos dev sur plusieurs écrans (avec live reloading): From live reloads to URL pushing, form replication to click mirroring, Browsersync cuts out repetitive manual tasks</p>\n<h2>Liens</h2>\n<p><a href=\"https://spin.atomicobject.com/2017/05/02/react-testing-jest-vs-mocha/\">blog</a></p>\n<p><a href=\"https://blog.usejournal.com/jest-vs-mocha-whats-the-difference-235df75ffdf3\">medium</a> Jest vs Mocha 2018</p>\n<p><a href=\"https://blog.theodo.fr/2017/04/enzyme-fast-and-simple-react-testing/\">Blog post sur Enzym</a></p>\n<p><a href=\"https://www.sitepoint.com/sinon-tutorial-javascript-testing-mocks-spies-stubs/\">Sinon</a></p>\n<p><a href=\"https://stateofjs.com/\">Stats d'adoption des framework</a> et + (2016 et 2017)</p>\n<p><a href=\"https://medium.com/welldone-software/an-overview-of-javascript-testing-in-2018-f68950900bc3\">Compilation</a> de toutes les infos nécessaire pour comprendre les différents outils intervenant dans les tests en JS:</p>\n<ol>\n<li>Provide a <strong>testing structure</strong> (<a href=\"https://mochajs.org/\">Mocha</a>, <a href=\"http://jasmine.github.io/\">Jasmine</a>, <a href=\"https://facebook.github.io/jest/\">Jest</a>, <a href=\"https://github.com/cucumber/cucumber-jshttps://github.com/cucumber/cucumber-js\">Cucumber</a>)</li>\n<li>Provide <strong>assertions functions</strong> (<a href=\"http://chaijs.com/\">Chai</a>, <a href=\"http://jasmine.github.io/\">Jasmine</a>, <a href=\"https://facebook.github.io/jest/\">Jest</a>, <a href=\"http://unexpected.js.org\" title=\"http://unexpected.js.org\">Unexpected</a>)</li>\n<li>Generate, <strong>display, and watch</strong> test results (<a href=\"https://mochajs.org/\">Mocha</a>, <a href=\"http://jasmine.github.io/\">Jasmine</a>, <a href=\"https://facebook.github.io/jest/\">Jest</a>, <a href=\"https://karma-runner.github.io/\">Karma</a>)</li>\n<li>Generate and compare <strong>snapshots</strong> of component and data structures to make sure changes from previous runs are intended (<a href=\"https://facebook.github.io/jest/\">Jest</a>, <a href=\"https://github.com/avajs/ava\">Ava</a>)</li>\n<li>Provide <strong>mocks, spies, and stubs</strong> (<a href=\"http://sinonjs.org/\">Sinon</a>, <a href=\"http://jasmine.github.io/\">Jasmine</a>, <a href=\"http://airbnb.io/enzyme/docs/api/\">enzyme</a>, <a href=\"https://facebook.github.io/jest/\">Jest</a>, <a href=\"https://github.com/testdouble/testdouble.js\">testdouble</a>)</li>\n<li>Generate <strong>code coverage</strong> reports (<a href=\"https://gotwarlost.github.io/istanbul/\">Istanbul</a>, <a href=\"https://facebook.github.io/jest/\">Jest</a>, <a href=\"http://blanketjs.org/\">Blanket</a>). Istanbul is built into <a href=\"http://facebook.github.io/jest/\">Jest</a>, so configuration is handled directly by Jest. The report can be generated by triggering jest with the <code class=\"language-text\">--coverage</code> flag. Jest provides documentation for configuring test coverage <a href=\"https://github.com/facebook/jest/blob/master/docs/Configuration.md\">here</a>.</li>\n<li>Provide a <strong>browser or browser-like environment</strong> with a control on their scenarios execution (<a href=\"http://www.protractortest.org\">Protractor</a><strong>,</strong> <a href=\"http://nightwatchjs.org\">Nightwatch</a>, <a href=\"http://phantomjs.org/\">Phantom</a><strong>,</strong> <a href=\"http://casperjs.org/\">Casper</a>)</li>\n</ol>"}},
    "staticQueryHashes": ["1026020893","1333896537","28434099"]}