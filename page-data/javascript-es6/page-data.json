{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/javascript-es6",
    "result": {"pageContext":{"id":"bccf5885-45d9-5c0f-94a8-a4fc7699f2be","fileAbsolutePath":"/Users/behrouze/Sources/gatsby-blog/obsidian/Blog/javascript-es6.md","frontmatter":{"categories":["javascript"],"date":"2018-05-31","lastUpdate":"2022-01-24","tags":["javascript"],"title":"Javascript ES6"},"html":"<h2>Const &#x26; Let</h2>\n<p><a href=\"https://babeljs.io/learn-es2015/\">ES6</a> introduit la notion de \"variables immuables\", ce sont des variables qui ne peuvent subir d'affectation qu'1 seule fois, à leur création. Par contre on peut bien sur affecter un objet à une constante, et cela n’empêche pas l'objet d’être modifié.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> toto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>     <span class=\"token comment\">// undefined</span>\ntoto                <span class=\"token comment\">// Object { }</span>\ntoto<span class=\"token punctuation\">.</span>tata <span class=\"token operator\">=</span> <span class=\"token number\">1</span>       <span class=\"token comment\">// 1 car on affecte une nouvelle propriété 'tata' à l'objet sur lequel pointe toto</span>\ntoto                <span class=\"token comment\">// Object { tata: 1 }</span>\ntoto <span class=\"token operator\">=</span> <span class=\"token number\">2</span>            <span class=\"token comment\">// TypeError: invalid assignment to const `toto`</span>\n<span class=\"token keyword\">const</span> toto<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// SyntaxError: missing = in const declaration[En savoir plus] debugger eval code:1:6</span>\n<span class=\"token keyword\">const</span> toto <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// SyntaxError: redeclaration of const toto</span></code></pre></div>\n<p>Le <strong>scope</strong> des variables déclarés const  et let  est le <strong>bloc</strong> (contrairement aux var dont le scope est la fonction), et ne subissent <strong>pas de \"hoisting\"</strong></p>\n<h2>Paramètres Rest</h2>\n<p>L'opérateur <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/param%C3%A8tres_du_reste\">Rest</a> (les ...  qui précèdent un argument dans la signature d'une fonction) interviennent <strong>dans la signature des fonctions</strong>.</p>\n<p>C'est un nouveau \"type\" de paramètre qui <strong>prend tous les arguments restant</strong> d'un appel et les mets à disposition dans le scope de la fonction à travers une variable de type tableau. Dans l'exemple suivant \"z\" est un parmètre rest :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">maFonctionToto</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>z</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// on défini une fonction, avec le paramètre rest 'z'</span>\n\n<span class=\"token function\">maFonctionToto</span><span class=\"token punctuation\">(</span>\n  <span class=\"token number\">111</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"tutu\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"youhoo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">login</span><span class=\"token operator\">:</span> <span class=\"token string\">\"behrouze\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"jeNeSuisQu1Texte\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// nous retourne: 111 tutu 5</span></code></pre></div>\n<h2>Opérateur Spread</h2>\n<p><a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Syntaxe_d%C3%A9composition\">Spread</a> (= déployer, disperser in english) permet d'<strong>éclater un objet ou un tableau</strong>, ce qui peut etre utile pour un appel de fonction ou pour recréer un autre tableau.\nUne variable spread peut également être affectée:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>objetIterable<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// la console nous indique bien Array(5) [ 1, 2, 3, 4, 5 ]</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nobjetIterable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Array(3) [ 3, 4, 5 ]</span></code></pre></div>\n<h2>Template Strings</h2>\n<p>Les templates strings fournissent du sucre syntaxique pour nous éviter de faire des concaténations de chaines et variables à l'ancienne (avec des <code class=\"language-text\">+</code> ).\nIl suffit simplement d'utiliser des <code class=\"language-text\">`</code> à la place de <code class=\"language-text\">\"</code> pour délimiter la chaine de caractères, et d'utiliser <code class=\"language-text\">${xxx}</code> pour substituer les variables (ici <code class=\"language-text\">xxx</code>) par leur chaine de caractère résultante :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Aujourd'hui (\"</span> <span class=\"token operator\">+</span> today <span class=\"token operator\">+</span> <span class=\"token string\">\") il fait \"</span> <span class=\"token operator\">+</span> temperature <span class=\"token operator\">+</span> <span class=\"token string\">\"°C\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Aujourd'hui (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>today<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">) il fait </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>temperature<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> °C</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Liens</h2>\n<ul>\n<li>un résumé clair <a href=\"https://github.com/lukehoban/es6features#ecmascript-6-gitioes6features\">ECMAScript 6</a> de <a href=\"https://github.com/lukehoban\">Luke Hoban</a></li>\n<li><a href=\"https://babeljs.io/docs/en/learn/\">Learn ES2015 Babel</a></li>\n<li>bel ensemble d'articles couvrant <a href=\"https://dev.to/carlillo/series/2347\">ES2016 à ES2021</a> de <a href=\"https://dev.to/carlillo\">Carlos Caballero</a> sur dev.to</li>\n</ul>"}},
    "staticQueryHashes": ["1026020893","1333896537","28434099"]}