{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/nuget-ligne-commande",
    "result": {"pageContext":{"id":"1a85d2e6-1159-5964-b956-736ce9cb35ba","fileAbsolutePath":"/Users/behrouze/Sources/gatsby-blog/obsidian/Blog/nuget-ligne-commande.md","frontmatter":{"categories":["dot-net","ide","productivite"],"date":"2013-08-01","lastUpdate":null,"tags":["microsoft","nuget","productivite","programmation","tutoriel","visual-studio"],"title":"NuGet le gestionnaire de Package (Package Manager) de Visual Studio"},"html":"<p>Pour les utilisateurs de Visual Studio (> VS 2010), il est possible de gérer les packages NuGet (le package manager de Visual Studio) en ligne de commande.</p>\n<h2>commandes utiles de la console NuGet</h2>\n<p>J'utilise ci-dessous comme nom de package passé en paramètre des différentes commandes \"<em>jquery\"</em>, il va de soi que vous devez remplacer <em>jquery</em> par le nom du package qui vous intéresse ;)</p>\n<h3>Aide sur les commandes NuGet</h3>\n<p>Get-Help <em>jquery</em> : affiche l'<strong>aide sur la commande NuGet</strong> \"Install-Package\"</p>\n<p>Get-Package : liste l'ensemble des packages (+ versions)  installés dans votre solution</p>\n<h3>Interroger votre source de donnée NuGet</h3>\n<p>Pour interroger votre source de donnée NuGet afin de récupérer une liste de packages disponibles:</p>\n<ul>\n<li>Get-Package -ListAvailable : liste de l'intégralité des packages disponibles dans votre source de package <em>(attention ça peut être long...)</em></li>\n<li>Get-Package -ListAvailable -Filter <em>jquery</em> : idem que la commande précédente, avec un <strong>filtre appliqué sur les colonnes Id et Description</strong> <em>(attention ça peut être long...)</em></li>\n<li>Get-Package -Filter <em>jquery</em> : packages contenant \"jquery\" dans leurs Id (le nom du package)</li>\n</ul>\n<h3>Pour installer/désinstaller un package</h3>\n<ul>\n<li>Uninstall-Package <em>jquery</em></li>\n<li>Uninstall-Package <em>jquery</em> -force : force la désinstallation d'un package car NuGet évitera de désinstaller un package ayant d'autre package qui en dépendent, cela peut etre utile si vous souhaitez par exemple downgrader de version</li>\n<li>Install-Package <em>jquery</em></li>\n<li>Install-Package <em>jquery</em> -version 1.10.2</li>\n<li>Get-Package -updates : vérifie et liste les nouvelles version de n'importe lequel de vos packages installés (n'effectue pas l'update)</li>\n<li>Update-Package <em>jQuery</em> : si la commande <em>\"Get-Package -updates\"</em> affiche qu'une nouvelle version de jQuery est disponible, cette commande permet d'effectuer la mise à jour <strong>dans tous les projets de votre solution</strong></li>\n<li>Update-Package <em>jQuery</em> –Project XXX : idem, l'installation du package se fait au niveau du projet spécifié</li>\n<li>Update-Package : mets à jour tous les packages disponibles <strong>dans tous les projets de votre solution</strong></li>\n</ul>\n<h3>Autres resources</h3>\n<p>Quelques <a href=\"http://docs.nuget.org/docs/start-here/videos\" title=\"Vidéos autour de NuGet le Package Manager de Visual Studio\">vidéos à propos de NuGet</a> (en anglais)</p>"}},
    "staticQueryHashes": ["1026020893","28434099","3153813225"]}