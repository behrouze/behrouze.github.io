{"componentChunkName":"component---src-templates-wp-post-tsx","path":"/principes-solid-programmation-orientee-objet","result":{"pageContext":{"id":"5a4fd0b3-9967-533e-a5ba-9983c5a96a65","fileAbsolutePath":"/home/behrouze/Sources/blog/obsidian/Blog/principes-solid-programmation-orientee-objet.md","frontmatter":{"categories":["programmation"],"date":"2014-05-11","lastUpdate":null,"tags":["c-sharp","programmation-oriente-objet","solid","principes"],"title":"principes SOLID en Programmation Orientée Objet"},"html":"<h1>SOLID</h1>\n<p><strong>S.O.L.I.D</strong> est l'acronyme de cinq principes de base applicable à la programmation orientée objet, qui permettent de produire du code plus propre et donc plus maintenable :</p>\n<ul>\n<li><strong>S</strong>ingle Responsibility Principle</li>\n<li><strong>O</strong>pen/Closed Principle</li>\n<li><strong>L</strong>iskov Substitution Principle</li>\n<li><strong>I</strong>nterface Segregation Principle</li>\n<li><strong>D</strong>ependency Inversion Principle</li>\n</ul>\n<p>Nous allons voir comment l'application de ces principes, permet d'améliorer la qualité du code en diminuant le couplage et favorisant l'encapsulation.</p>\n<ul>\n<li>Le couplage est le degré de dépendance d'une classe à d'autres classes, plus le couplage est dit fort, plus la classe dépendante sera impactée si la classe de laquelle elle dépend est modifiée</li>\n<li>L'encapsulation est le concept qui indique qu'une classe n'expose pas au monde les détails de son fonctionnement interne</li>\n</ul>\n<h2>Single Responsibility Principle</h2>\n<p>Le principe d'unique responsabilité indique qu'une classe donnée ne doit avoir qu'une seule responsabilité, qu'elle ne doit donc avoir qu'une seule raison de changer. Cela permet d'identifier rapidement et avec certitude LA classe impactée lors d'une évolution ou de correction.</p>\n<h2><strong>O</strong>pen/Closed Principle</h2>\n<p>Le principe Ouvert/Fermé stipule que tout module soit conçu pour rester ouvert aux extensions de fonctionnalité (par héritage + interfaces) mais fermé aux modifications (sauf pour corrections).</p>\n<h2><strong>L</strong>iskov Substitution Principle</h2>\n<p>Les sous-types doivent pouvoir être remplacés par leur type de base.</p>\n<h2><strong>I</strong>nterface Segregation Principle</h2>\n<p>TODO</p>\n<h2><strong>D</strong>ependency Inversion Principle</h2>\n<p>TODO</p>\n<p><a href=\"http://philippe.developpez.com/articles/SOLIDdotNet/\">Excellent article à propos de S.O.L.I.D</a> avec théorie et exemples</p>\n<p><a href=\"http://lostechies.com/wp-content/uploads/2011/03/pablos_solid_ebook.pdf\">Ebook gratuit dédié aux principes S.O.L.I.D</a> (en anglais) <a href=\"http://brooz.fr/wp-content/uploads/2014/05/pablos_solid_ebook.pdf\">pdf</a></p>"}},"staticQueryHashes":["1026020893","2750442709","28434099"]}