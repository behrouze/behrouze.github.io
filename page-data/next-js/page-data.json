{
    "componentChunkName": "component---src-templates-wp-post-tsx",
    "path": "/next-js",
    "result": {"pageContext":{"id":"5319cce8-48a9-5612-8074-1c69f619d35c","fileAbsolutePath":"/home/behrouze/Sources/gatsby-blog/obsidian/Blog/next-js.md","frontmatter":{"categories":["javascript"],"date":"2018-10-02","lastUpdate":"2022-02-22","tags":["javascript","react","nextjs","gaphql","gatsby","jamstack"],"title":"Next.js"},"html":"<p><img src=\"Vercel_Nextjs_20220218111421.png\" alt=\"\">\n<a href=\"https://nextjs.org\">Next.js</a> est devenu le leader incontest√© üéñ des webapp React type SSR !\n<a href=\"https://nextjs.org/blog/next-12\">Next.js 12</a> Canary est la <a href=\"https://nextjs.org/blog\">version</a> courante d√©velopp√©e et maintenue par des √©quipes de <a href=\"https://vercel.com/\">Vercel</a> (ex <a href=\"https://www.theregister.com/2020/04/22/nextjs_vercel_logowatch/\">Zeit</a>), la soci√©t√© qui a <a href=\"https://techcrunch.com/2021/06/23/vercel-raises-102m-series-c-for-its-next-js-based-front-end-development-platform\">lev√© 102$ million en 2021</a> pour acc√©l√©rer les d√©veloppements.</p>\n<p>D'un point de vue de d√©veloppeur, ce qui rend l'usage de <strong>Next.js intuitif</strong>, r√©side dans le fait le routage est une correspondance entre un <strong>fichier JavaScript</strong> et une <strong>URL</strong>, le fichier /pages/toto.js g√©n√©rera automatiquement l'URL <a href=\"http://monsite/toto\">http://monsite/toto</a>, et ce mod√®le supporte le <a href=\"https://nextjs.org/docs/routing/dynamic-routes\">routage dynamique</a> (avec des variables dans l'URL).</p>\n<p>Next.js est donc LE standard en 2022, mais un s√©rieux concurrent commence a √©merger : <a href=\"https://remix.run/blog/remix-vs-next\">Remix</a> üíø, cr√©√© par les concepteurs de <a href=\"https://www.flaco.dev/blog/what-is-react-remix\">React Router</a> (<a href=\"https://reactresources.com/people/michael-jackson\">Michael Jackson</a> &#x26; <a href=\"https://reactresources.com/people/ryan-florence\">Ryan Florence</a> et rejoints depuis peu <a href=\"https://reactresources.com/people/kent-c-dodds\">Kent C. Dodds</a>).\nEcouter une <a href=\"https://devtools.fm/episode/19\">discussion des cr√©ateurs de Remix</a> (podcast üîâ).</p>\n<h2>Int√©r√™ts de Next.js</h2>\n<p>Les int√©r√™ts de Next.js par rapport √† une solution classique √† base d'API Back + React en front sont :</p>\n<ul>\n<li>supporte diff√©rentes <a href=\"https://nextjs.org/docs/basic-features/data-fetching/overview\">m√©thodes de rendu de pages</a> (SSR, SSG et CSR) permettant d'optimiser le SEO. Le SSR est ce qui a fait le succ√®s ü•Ç de Next.js.</li>\n<li>utilise un <strong>routage</strong> (routing) tr√®s intuitif et <a href=\"https://nextjs.org/docs/routing/dynamic-routes\">dynamique</a></li>\n<li>support de <a href=\"https://nextjs.org/docs/basic-features/supported-browsers-features#javascript-language-features\">> ES6</a> ainsi que <a href=\"https://nextjs.org/docs/basic-features/typescript\">typescript</a></li>\n<li><a href=\"https://nextjs.org/docs/upgrading\">guides d'upgrade</a> assez clean pour migrer de version de Next.js et un <a href=\"https://nextjs.org/docs/advanced-features/codemods\">codemod</a> est √©galement disponible pour automatiser en partie les migrations</li>\n<li><strong>learning curve</strong> plutot raide pour les <em>d√©veloppeurs React</em> avec une prise en main rapide gr√¢ce √† leurs super <a href=\"https://nextjs.org/learn/basics/create-nextjs-app\">tutos</a> üöÄ</li>\n</ul>\n<h2>Routing</h2>\n<h3>Pages</h3>\n<p>Une <strong>URL</strong> est <strong>cr√©e</strong> <strong>automatiquement</strong> d√®s qu'on d√©pose un <strong>fichier JS</strong> ou <strong>JSX</strong> dans le dossier <code class=\"language-text\">/pages/</code> (par <strong>convention</strong>).\nDe plus Next.js supporte:</p>\n<ul>\n<li>les <a href=\"https://nextjs.org/docs/routing/introduction#nested-routes\">nested routes</a> : l'URL <code class=\"language-text\">pages/toto/titi/tutu</code> sera rout√©e vers le fichier <code class=\"language-text\">tutu.jsx</code> <code class=\"language-text\">pages/toto/titi/tutu.jsx</code></li>\n<li>les <a href=\"https://nextjs.org/docs/routing/introduction#index-routes\">Index routes</a> : l'URL <code class=\"language-text\">pages/toto/titi/tutu</code>  sera rout√©e vers le fichier <code class=\"language-text\">index</code> suivant : <code class=\"language-text\">pages/toto/titi/tutu/index.jsx</code></li>\n<li>les routes dynamiques (<a href=\"https://nextjs.org/blog/next-9#dynamic-route-segments\">depuis v9</a>) : utilisation d'une variable d'URL <code class=\"language-text\">/:toto</code>  pour etre rout√© vers <code class=\"language-text\">/[toto].js</code> (valable pour les dossiers aussi), et de <a href=\"https://nextjs.org/docs/routing/dynamic-routes#catch-all-routes\">catch all routes</a> <code class=\"language-text\">/[...toto].js</code></li>\n</ul>\n<h3>API</h3>\n<p>Il est possible depuis Next.js 10 de cr√©er des <a href=\"https://nextjs.org/docs/api-routes/introduction\">API dans Next.js</a>, <code class=\"language-text\">pages/api</code> sera mapp√© √† <code class=\"language-text\">/api/*</code>.</p>\n<p>‚ö† Attention, cette solution est plutot limit√©s compar√©e √† des solutions robustes et pleines de fonctionnalit√©s comme <a href=\"https://docs.nestjs.com/\">NestJS</a>.\nD'apr√®s la doc le <a href=\"https://nextjs.org/docs/api-routes/introduction#use-cases\">use case typique d'une API Next.js</a> est de jouer un role de <strong>Proxy</strong> soit pour masquer des URL internes, soit pour utiliser des variables d'environements.\nJ'ajouterai que c'est un tr√®s bon moyen de <a href=\"https://www.manager-go.com/gestion-de-projet/poc.htm\">POC</a>er üèé !</p>\n<h3>Public</h3>\n<p>Pour les <strong>√©l√©ments statiques</strong> (images, css, <code class=\"language-text\">robots.txt</code>, <code class=\"language-text\">favicon.ico</code>, et autres) il existe le dossier <code class=\"language-text\">/public/</code> (anciennement <code class=\"language-text\">/static/</code>) r√©serv√© a cet effet.</p>\n<h3>Cycle de vie du Router</h3>\n<p>Le Router de Next.js propose un ensemble d'√©v√®nements qu'il est possible d'√©couter :</p>\n<ul>\n<li><strong>route</strong>ChangeStart(url)</li>\n<li><strong>route</strong>ChangeComplete(url)</li>\n<li><strong>route</strong>ChangeError(err, url)</li>\n<li>before<strong>History</strong>Change(url)</li>\n<li><strong>hash</strong>ChangeStart(url)</li>\n<li><strong>hash</strong>ChangeComplete(url)</li>\n</ul>\n<h3>Navigation</h3>\n<p>La navigation est simplifi√©e par l'usage de :</p>\n<ul>\n<li>\n<p>composants Next.js <a href=\"https://nextjs.org/docs/api-reference/next/link\">Link</a> du package <code class=\"language-text\">next/link</code></p>\n</li>\n<li>\n<p>un routage <a href=\"https://github.com/zeit/next.js#imperatively\">imperatif</a> gr√¢ce au hook <code class=\"language-text\">useRouter</code> du package <code class=\"language-text\">next/router</code>  qui nous retourne un <a href=\"https://nextjs.org/docs/api-reference/next/router#router-object\">objet <code class=\"language-text\">router</code></a> auxquels on peut associer l'<a href=\"https://nodejs.org/api/url.html#url_url_strings_and_url_objects\">objet URL</a> et par exemple pour la fonction <code class=\"language-text\">router.push</code> on a les <a href=\"https://nextjs.org/docs/api-reference/next/router#routerpush\">arguments</a> :</p>\n<ul>\n<li>la prop <strong>href</strong> permet au framework de faire le lien entre l'URL et les fichiers JS contenu dans le dossier pages</li>\n<li>la prop <strong>as</strong> permet de cr√©er et d'<strong>afficher dans le HTML r√©sultant</strong> un <em>href alias</em> (ici le lien pointera vers /p/xxx), qu'il faudra trait√© cot√© back (m√©thode render de l'API next).</li>\n</ul>\n</li>\n<li>\n<p>le <a href=\"https://nextjs.org/docs/routing/shallow-routing\">shallow routing</a> qui consiste √† ne pas avoir a charger une nouvelle fois la page et byepasser toutes les m√©thodes de data fetching (<a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\"><code class=\"language-text\">getServerSideProps</code></a>, <a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-static-props\"><code class=\"language-text\">getStaticProps</code></a>, et <a href=\"https://nextjs.org/docs/api-reference/data-fetching/get-initial-props\"><code class=\"language-text\">getInitialProps</code></a>) si on navigue sur la <strong>meme page</strong>.</p>\n</li>\n</ul>\n<h2>Data fetching</h2>\n<p>La <a href=\"https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support\">Next.js 9.3</a> a introduit 3 nouvelles fonctions async export√© de pages Next.js  qui vont progressivement remplacer l'ancien <code class=\"language-text\">getInitialProps</code>:</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching\"><code class=\"language-text\">getStaticProps</code></a> et <a href=\"https://nextjs.org/docs/basic-features/data-fetching\"><code class=\"language-text\">getServerSideProps</code></a> pour distinguer si on utiliser SSR ou SSG pour chaque page</li>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching\"><code class=\"language-text\">getStaticPaths</code></a> pour g√©n√©rer des pages statiques sur des routes dynamiques</li>\n</ul>\n<h3>getServerSideProps</h3>\n<p><a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\">getServerSideProps</a> permet de g√©n√©rer la page en mode SSR cot√© serveur.</p>\n<p>Le point int√©ressant √† noter est que lors de l'utilisation de <a href=\"https://nextjs.org/docs/api-reference/next/link\"><code class=\"language-text\">next/link</code></a> or <a href=\"https://nextjs.org/docs/api-reference/next/router\"><code class=\"language-text\">next/router</code></a> pour la navigation, seul un appel d'API est √©mis pour r√©cup√©rer la data sous forme de JSON. Cela permet de ne pas casser le flow de la SPA.</p>\n<h3>getStaticProps</h3>\ngetStaticProps implique la g√©n√©ration d'une page en mode SSG (comme avec <a href=\"/gatsby#data\" title=\"Gatsby\">Gatsby</a>).\n<p>On utilise le SSG lorsque les <em>donn√©es</em> sont disponible lors du build et ne sont pas sp√©cifique √† un utilisateur (peuvent etre mis en cache).</p>\n<h3>getStaticPaths</h3>\n<p><a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-static-paths\">getStaticPaths</a> est utilis√© dans le cas de pages utilisant <code class=\"language-text\">getStaticProps</code> (ci-dessus) et exploitant la fonctionnalit√© de <a href=\"https://nextjs.org/docs/routing/dynamic-routes\">Dynamic Routes</a> pour g√©n√©rer toutes les pages avec toutes les combinaisons de routes lors de la build.</p>\n<h3>getInitialProps (√† ne plus utiliser)</h3>\n<p>Depuis <a href=\"https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support\">Next.js 9.3</a> il est recommand√© de ne plus utiliser <code class=\"language-text\">getInitialProps</code>  mais plutot <code class=\"language-text\">getStaticProps</code> ou <code class=\"language-text\">getServerSideProps</code>.</p>\n<h2>Styling</h2>\n<h3>styled-jsx le CSS-in-JS de Next.js</h3>\n<p>Next.js a fait le <a href=\"https://nextjs.org/docs/basic-features/built-in-css-support#css-in-js\">choix</a> d'embarquer <a href=\"https://github.com/zeit/styled-jsx#styled-jsx\">styled-jsx</a> qui est une des solution CSS-in-JS mais il existe de <a href=\"http://michelebertoli.github.io/css-in-js/\">nombreuses solutions</a> qu'il est possible d'utiliser avec Next.js (<em>Styled Components</em> ou <em>Emotion</em>), voir des exemples d'utilisations dans <a href=\"https://nextjs.org/docs/basic-features/built-in-css-support#css-in-js\">cette section exemple</a>.</p>\n<p>Le CSS-in-JS permet d'avoir des styles scop√©s au niveau du composant, des styles dynamiques fonction du code, et surtout d'appliquer les styles lors du rendu cot√© serveur.</p>\n<p>L'utilisation est encore une fois tr√®s intuitive, car il suffit d'√©crire ses styles directement dans des balises <code class=\"language-text\">&lt;style jsx></code>¬† √† l‚Äôint√©rieur de ses composants en utilisant la syntaxe <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template strings</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">global</span> <span class=\"token attr-name\">jsx</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">{`\n    h1, a {\n    font-family: \"Arial\";\n  }\n`}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>CSS classique</h3>\n<p>Il est cependant possible depuis <a href=\"https://nextjs.org/blog/next-9-2\">Next.js 9.2</a> d'utiliser les <a href=\"https://blog.logrocket.com/a-deep-dive-into-css-modules/\">CSS Modules</a> üéâ en important directement des <code class=\"language-text\">.css</code> (styles global) ou des <code class=\"language-text\">.module.css</code> pour des styles scop√©s au composant.</p>\n<h2>Squelettes de projets Next.JS</h2>\n<p>Un outil sympathique, qui fourni un squelette de projet Next.js/React/Redux est <a href=\"https://github.com/segmentio/create-next-app/blob/master/README.md\">create-next-app</a>, parfait pour voir rapidement les branchements entre ces outils :)</p>\nConcernant <a href=\"/materialui-react\" title=\"Material UI\">Material UI</a>, il y a un exemple de projet Nexjs/MaterialUI ainsi qu'une doc SSR Material UI.\n<h2>Divers et DX</h2>\n<h3>Appels Ajax</h3>\n<p>Support de <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch</a> par polyfill cot√© navigateur (depuis Next.js 9.1.7), et <a href=\"https://nextjs.org/blog/next-9-4#improved-built-in-fetch-support\">cot√© Nodejs(depuis Nexjs 9.4)</a>.\nNous pouvons donc simplement utiliser fetch() partout dans notre code.</p>\n<h3>Variable d'environnements</h3>\n<p><a href=\"https://nextjs.org/blog/next-9-4#new-environment-variables-support\">Next 9.4</a> a simplifi√© et clarifi√© l'usage des <a href=\"https://nextjs.org/docs/basic-features/environment-variables\">variable d'environnements</a> avec :</p>\n<ul>\n<li>le support des fichiers <a href=\"https://nextjs.org/docs/basic-features/environment-variables\">.env</a></li>\n<li>par d√©faut les vars d'env sont disponible uniquement cot√© serveur, mais s'ils sont prefix√©s par <code class=\"language-text\">NEXT_PUBLIC_</code> il sont √©galement disponibles dans le navigateur (plus besoin d'utiliser le <code class=\"language-text\">next.config.js</code> pour y d√©finir les vars)</li>\n</ul>\n<h3>Chemins absolu pour les imports and aliases</h3>\n<p>Toujours depuis la <a href=\"https://nextjs.org/blog/next-9-4#absolute-imports-and-aliases\">9.4</a> Next.js supporte d√©sormais la personnalisation des chemins d'imports de modules dans le <a href=\"https://code.visualstudio.com/docs/languages/jsconfig#_jsconfig-options\"><code class=\"language-text\">jsconfig.json</code> (JS projects)</a> ou le <a href=\"https://www.typescriptlang.org/docs/handbook/module-resolution.html#base-url\"><code class=\"language-text\">tsconfig.json</code> (TS projects)</a> :</p>\n<ul>\n<li>les <strong>chemins absolu</strong> en ajoutant la cl√© <code class=\"language-text\"> \"baseUrl\": \".\"</code> .</li>\n<li>les <strong>alias de modules</strong> en ajoutant la cl√© <code class=\"language-text\">\"paths\": {\"@/design-system/*\": [\"components/design-system/*\"]}</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// tsconfig.json ou jsconfig.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@/design-system/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"components/design-system/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Debugging</h3>\n<p>La doc Next.js nous fourni (et c'est plutot rare pour le souligner) le <code class=\"language-text\">.vscode/launch.json</code> qui est la <a href=\"https://nextjs.org/docs/advanced-features/debugging#debugging-with-vs-code\">config de VSCode pour debugger un projet Next.js</a> üòçü•≥ üéâ.\nElle est un peu particuli√®re parcequ'il faut pouvoir debugger cot√© client et serveur :</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Next.js: debug server-side\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node-terminal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run dev\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Next.js: debug client-side\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pwa-chrome\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:3000\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Next.js: debug full stack\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node-terminal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run dev\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"integratedTerminal\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"serverReadyAction\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"pattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"started server on .+, url: (https?://.+)\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"uriFormat\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"debugWithChrome\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},
    "staticQueryHashes": ["1026020893","28434099","3153813225"]}