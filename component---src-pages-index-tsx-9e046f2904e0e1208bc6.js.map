{"version":3,"file":"component---src-pages-index-tsx-9e046f2904e0e1208bc6.js","mappings":"kLAAA,IAAMA,EAAa,SAACC,EAAcC,QAAyB,IAAzBA,IAAAA,GAAe,GAC/C,IAMMC,EAAY,IAAIC,KAAKH,GAAMI,mBAAmB,QANpC,CACdC,KAAM,UACNC,MAAO,OACPC,IAAK,YAIP,OAAON,EAAe,iBAAiBC,EAApB,aAA+CA,GAG9DM,EAAiB,SAACC,EAAsBC,GAAvB,OACrBA,GAAc,IAAIP,KAAKM,GAAgB,IAAIN,KAAKO,K,iICFrCC,EAA0B,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,KACpD,OAAKA,EAGH,gBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,GAAI,CAAEC,SAAU,UAAYC,MAAOC,EAAAA,EAAAA,OACtDP,EAAa,YAAc,OADjC,MAC4CC,GAJ5B,M,kBC+FpB,EArFkB,SAAC,GAMA,IAJMO,EAIN,EALjBC,KACEC,kBAAqBF,MAKvB,GAAgCG,EAAAA,EAAAA,UAAiB,IAA1CC,EAAP,KAAiBC,EAAjB,KACA,GAA0CF,EAAAA,EAAAA,UAAiB,IAApDG,EAAP,KAAsBC,EAAtB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACc,oBAAXC,SACTJ,EAAY,IAAIK,IAAID,OAAOE,SAASC,MAAMC,aAAaC,IAAI,QAC3DP,EACE,IAAIG,IAAID,OAAOE,SAASC,MAAMC,aAAaC,IAAI,iBAMnD,gBAACC,EAAA,EAAD,KACE,gBAACxB,EAAD,CAAaC,aAAcc,EAAeb,KAAMW,IAE/CJ,EAAMgB,KAAI,SAACC,GACV,MAAsDA,EAAKC,YAAnDC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,MAAOzC,EAAjC,EAAiCA,KAAM0C,EAAvC,EAAuCA,WAEjCC,GAAgBnC,EAAAA,EAAAA,GAAeR,EAAM0C,IACvC3C,EAAAA,EAAAA,GAAW2C,GAAY,IACvB3C,EAAAA,EAAAA,GAAWC,GAEf,IAAKyC,EAAO,OAAO,KAEnB,IAAMG,IAAelB,KAAmBF,EAClCqB,EAAiBN,MAAAA,OAAH,EAAGA,EAAYO,SAASpB,GACtCqB,EAAWP,MAAAA,OAAH,EAAGA,EAAMM,SAAStB,GAEhC,IAAKoB,GAAeA,IAAeC,GAAkBE,GAAY,CAC/D,IAAMlC,GAAOmC,EAAAA,EAAAA,GAAeX,EAAKY,kBACjC,OACE,uBAAKC,IAAKrC,EAAMsC,MAAO,CAAEC,OAAQ,iBAC/B,gBAAC,IAAD,CACEC,UAAWC,EAAAA,KACXC,GAAI1C,EACJ2C,UAAU,OACVL,MAAO,CAAEM,QAAS,QAASL,OAAQ,cACnCM,wBAAyB,CAAEC,OAAQlB,KAErC,wBACEU,MAAO,CACLjC,MAAOC,EAAAA,EAAAA,KACPF,SAAU,SACVmC,OAAQ,iBAGTT","sources":["webpack://behrouze-tech-blog/./src/libs/dateHelper.ts","webpack://behrouze-tech-blog/./src/components/TitleFilter.tsx","webpack://behrouze-tech-blog/./src/pages/index.tsx"],"sourcesContent":["const formatDate = (date: string, isUpdateDate = false) => {\n  const options = {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  };\n\n  const formatted = new Date(date).toLocaleDateString(\"fr-FR\", options);\n  return isUpdateDate ? `mis à jour le ${formatted}` : `rédigé le ${formatted}`;\n};\n\nconst hasBeenUpdated = (creationDate: string, editedDate: string) =>\n  editedDate && new Date(creationDate) < new Date(editedDate);\n\nexport { formatDate, hasBeenUpdated };\n","import * as React from \"react\";\nimport { FC } from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { blueGrey } from \"@mui/material/colors\";\n\ninterface IProps {\n  isCategory: boolean;\n  slug: string;\n}\n\nexport const TitleFilter: FC<IProps> = ({ isCategory, slug }) => {\n  if (!slug) return null;\n\n  return (\n    <Typography variant=\"h2\" sx={{ fontSize: \"1.5rem\" }} color={blueGrey[500]}>\n      {`${isCategory ? \"Catégorie\" : \"Tag\"} : ${slug}`}\n    </Typography>\n  );\n};\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport { Link as MuiLink } from \"@mui/material\";\nimport { blueGrey } from \"@mui/material/colors\";\nimport { Layout } from \"components/Layout\";\nimport { TitleFilter } from \"components/TitleFilter\";\nimport { slugFromMdPath } from \"libs/stringHelper\";\nimport { formatDate, hasBeenUpdated } from \"libs/dateHelper\";\n\ninterface nodeType {\n  frontmatter: {\n    categories: Array<string>;\n    tags: Array<string>;\n    title: any;\n    date: string;\n    lastUpdate: string;\n  };\n  fileAbsolutePath: string;\n}\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { nodes },\n  },\n}: {\n  data: { allMarkdownRemark: { nodes: Array<nodeType> } };\n}): JSX.Element => {\n  const [queryTag, setQueryTag] = useState<string>(\"\");\n  const [queryCategory, setQueryCategory] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      setQueryTag(new URL(window.location.href).searchParams.get(\"tag\"));\n      setQueryCategory(\n        new URL(window.location.href).searchParams.get(\"category\")\n      );\n    }\n  });\n\n  return (\n    <Layout>\n      <TitleFilter isCategory={!!queryCategory} slug={queryTag} />\n\n      {nodes.map((node) => {\n        const { categories, tags, title, date, lastUpdate } = node.frontmatter;\n\n        const dateToDisplay = hasBeenUpdated(date, lastUpdate)\n          ? formatDate(lastUpdate, true)\n          : formatDate(date);\n\n        if (!title) return null;\n\n        const isFiltered = !!queryCategory || !!queryTag;\n        const nodeCategories = categories?.includes(queryCategory);\n        const nodeTags = tags?.includes(queryTag);\n\n        if (!isFiltered || (isFiltered && (nodeCategories || nodeTags))) {\n          const slug = slugFromMdPath(node.fileAbsolutePath);\n          return (\n            <div key={slug} style={{ margin: \"0.7rem 0 0 0\" }}>\n              <MuiLink\n                component={Link}\n                to={slug}\n                underline=\"none\"\n                style={{ display: \"block\", margin: \"0 1rem 0 0\" }}\n                dangerouslySetInnerHTML={{ __html: title }}\n              />\n              <span\n                style={{\n                  color: blueGrey[\"300\"],\n                  fontSize: \"0.7rem\",\n                  margin: \"0 0 0 0.2rem\",\n                }}\n              >\n                {dateToDisplay}\n              </span>\n            </div>\n          );\n        }\n      })}\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: { frontmatter: { categories: { ne: null } } }\n    ) {\n      nodes {\n        frontmatter {\n          title\n          categories\n          tags\n          date\n          lastUpdate\n        }\n        id\n        fileAbsolutePath\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"names":["formatDate","date","isUpdateDate","formatted","Date","toLocaleDateString","year","month","day","hasBeenUpdated","creationDate","editedDate","TitleFilter","isCategory","slug","Typography","variant","sx","fontSize","color","blueGrey","nodes","data","allMarkdownRemark","useState","queryTag","setQueryTag","queryCategory","setQueryCategory","useEffect","window","URL","location","href","searchParams","get","Layout","map","node","frontmatter","categories","tags","title","lastUpdate","dateToDisplay","isFiltered","nodeCategories","includes","nodeTags","slugFromMdPath","fileAbsolutePath","key","style","margin","component","Link","to","underline","display","dangerouslySetInnerHTML","__html"],"sourceRoot":""}